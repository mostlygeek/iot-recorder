// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testDemands(t *testing.T) {
	t.Parallel()

	query := Demands()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testDemandsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Demand{}
	if err = randomize.Struct(seed, o, demandDBTypes, true, demandColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Demand struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Demands().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDemandsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Demand{}
	if err = randomize.Struct(seed, o, demandDBTypes, true, demandColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Demand struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Demands().DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Demands().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDemandsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Demand{}
	if err = randomize.Struct(seed, o, demandDBTypes, true, demandColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Demand struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DemandSlice{o}

	if rowsAff, err := slice.DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Demands().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDemandsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Demand{}
	if err = randomize.Struct(seed, o, demandDBTypes, true, demandColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Demand struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := DemandExists(tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Demand exists: %s", err)
	}
	if !e {
		t.Errorf("Expected DemandExists to return true, but got false.")
	}
}

func testDemandsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Demand{}
	if err = randomize.Struct(seed, o, demandDBTypes, true, demandColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Demand struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	demandFound, err := FindDemand(tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if demandFound == nil {
		t.Error("want a record, got nil")
	}
}

func testDemandsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Demand{}
	if err = randomize.Struct(seed, o, demandDBTypes, true, demandColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Demand struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Demands().Bind(nil, tx, o); err != nil {
		t.Error(err)
	}
}

func testDemandsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Demand{}
	if err = randomize.Struct(seed, o, demandDBTypes, true, demandColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Demand struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Demands().One(tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testDemandsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	demandOne := &Demand{}
	demandTwo := &Demand{}
	if err = randomize.Struct(seed, demandOne, demandDBTypes, false, demandColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Demand struct: %s", err)
	}
	if err = randomize.Struct(seed, demandTwo, demandDBTypes, false, demandColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Demand struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = demandOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = demandTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Demands().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testDemandsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	demandOne := &Demand{}
	demandTwo := &Demand{}
	if err = randomize.Struct(seed, demandOne, demandDBTypes, false, demandColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Demand struct: %s", err)
	}
	if err = randomize.Struct(seed, demandTwo, demandDBTypes, false, demandColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Demand struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = demandOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = demandTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Demands().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func demandBeforeInsertHook(e boil.Executor, o *Demand) error {
	*o = Demand{}
	return nil
}

func demandAfterInsertHook(e boil.Executor, o *Demand) error {
	*o = Demand{}
	return nil
}

func demandAfterSelectHook(e boil.Executor, o *Demand) error {
	*o = Demand{}
	return nil
}

func demandBeforeUpdateHook(e boil.Executor, o *Demand) error {
	*o = Demand{}
	return nil
}

func demandAfterUpdateHook(e boil.Executor, o *Demand) error {
	*o = Demand{}
	return nil
}

func demandBeforeDeleteHook(e boil.Executor, o *Demand) error {
	*o = Demand{}
	return nil
}

func demandAfterDeleteHook(e boil.Executor, o *Demand) error {
	*o = Demand{}
	return nil
}

func demandBeforeUpsertHook(e boil.Executor, o *Demand) error {
	*o = Demand{}
	return nil
}

func demandAfterUpsertHook(e boil.Executor, o *Demand) error {
	*o = Demand{}
	return nil
}

func testDemandsHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &Demand{}
	o := &Demand{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, demandDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Demand object: %s", err)
	}

	AddDemandHook(boil.BeforeInsertHook, demandBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	demandBeforeInsertHooks = []DemandHook{}

	AddDemandHook(boil.AfterInsertHook, demandAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	demandAfterInsertHooks = []DemandHook{}

	AddDemandHook(boil.AfterSelectHook, demandAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	demandAfterSelectHooks = []DemandHook{}

	AddDemandHook(boil.BeforeUpdateHook, demandBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	demandBeforeUpdateHooks = []DemandHook{}

	AddDemandHook(boil.AfterUpdateHook, demandAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	demandAfterUpdateHooks = []DemandHook{}

	AddDemandHook(boil.BeforeDeleteHook, demandBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	demandBeforeDeleteHooks = []DemandHook{}

	AddDemandHook(boil.AfterDeleteHook, demandAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	demandAfterDeleteHooks = []DemandHook{}

	AddDemandHook(boil.BeforeUpsertHook, demandBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	demandBeforeUpsertHooks = []DemandHook{}

	AddDemandHook(boil.AfterUpsertHook, demandAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	demandAfterUpsertHooks = []DemandHook{}
}

func testDemandsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Demand{}
	if err = randomize.Struct(seed, o, demandDBTypes, true, demandColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Demand struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Demands().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDemandsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Demand{}
	if err = randomize.Struct(seed, o, demandDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Demand struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Whitelist(demandColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Demands().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDemandsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Demand{}
	if err = randomize.Struct(seed, o, demandDBTypes, true, demandColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Demand struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testDemandsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Demand{}
	if err = randomize.Struct(seed, o, demandDBTypes, true, demandColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Demand struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DemandSlice{o}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}

func testDemandsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Demand{}
	if err = randomize.Struct(seed, o, demandDBTypes, true, demandColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Demand struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Demands().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	demandDBTypes = map[string]string{`Demand`: `MEDIUMINT`, `ID`: `INTEGER`, `Timestamp`: `INTEGER`}
	_             = bytes.MinRead
)

func testDemandsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(demandPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(demandColumns) == len(demandPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Demand{}
	if err = randomize.Struct(seed, o, demandDBTypes, true, demandColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Demand struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Demands().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, demandDBTypes, true, demandPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Demand struct: %s", err)
	}

	if rowsAff, err := o.Update(tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testDemandsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(demandColumns) == len(demandPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Demand{}
	if err = randomize.Struct(seed, o, demandDBTypes, true, demandColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Demand struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Demands().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, demandDBTypes, true, demandPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Demand struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(demandColumns, demandPrimaryKeyColumns) {
		fields = demandColumns
	} else {
		fields = strmangle.SetComplement(
			demandColumns,
			demandPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := DemandSlice{o}
	if rowsAff, err := slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}
