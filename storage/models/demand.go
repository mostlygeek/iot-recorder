// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Demand is an object representing the database table.
type Demand struct {
	ID        int64 `boil:"id" json:"id" toml:"id" yaml:"id"`
	Timestamp int64 `boil:"timestamp" json:"timestamp" toml:"timestamp" yaml:"timestamp"`
	Demand    int32 `boil:"demand" json:"demand" toml:"demand" yaml:"demand"`

	R *demandR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L demandL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DemandColumns = struct {
	ID        string
	Timestamp string
	Demand    string
}{
	ID:        "id",
	Timestamp: "timestamp",
	Demand:    "demand",
}

// DemandRels is where relationship names are stored.
var DemandRels = struct {
}{}

// demandR is where relationships are stored.
type demandR struct {
}

// NewStruct creates a new relationship struct
func (*demandR) NewStruct() *demandR {
	return &demandR{}
}

// demandL is where Load methods for each relationship are stored.
type demandL struct{}

var (
	demandColumns               = []string{"id", "timestamp", "demand"}
	demandColumnsWithoutDefault = []string{"timestamp", "demand"}
	demandColumnsWithDefault    = []string{"id"}
	demandPrimaryKeyColumns     = []string{"id"}
)

type (
	// DemandSlice is an alias for a slice of pointers to Demand.
	// This should generally be used opposed to []Demand.
	DemandSlice []*Demand
	// DemandHook is the signature for custom Demand hook methods
	DemandHook func(boil.Executor, *Demand) error

	demandQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	demandType                 = reflect.TypeOf(&Demand{})
	demandMapping              = queries.MakeStructMapping(demandType)
	demandPrimaryKeyMapping, _ = queries.BindMapping(demandType, demandMapping, demandPrimaryKeyColumns)
	demandInsertCacheMut       sync.RWMutex
	demandInsertCache          = make(map[string]insertCache)
	demandUpdateCacheMut       sync.RWMutex
	demandUpdateCache          = make(map[string]updateCache)
	demandUpsertCacheMut       sync.RWMutex
	demandUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
)

var demandBeforeInsertHooks []DemandHook
var demandBeforeUpdateHooks []DemandHook
var demandBeforeDeleteHooks []DemandHook
var demandBeforeUpsertHooks []DemandHook

var demandAfterInsertHooks []DemandHook
var demandAfterSelectHooks []DemandHook
var demandAfterUpdateHooks []DemandHook
var demandAfterDeleteHooks []DemandHook
var demandAfterUpsertHooks []DemandHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Demand) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range demandBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Demand) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range demandBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Demand) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range demandBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Demand) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range demandBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Demand) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range demandAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Demand) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range demandAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Demand) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range demandAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Demand) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range demandAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Demand) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range demandAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDemandHook registers your hook function for all future operations.
func AddDemandHook(hookPoint boil.HookPoint, demandHook DemandHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		demandBeforeInsertHooks = append(demandBeforeInsertHooks, demandHook)
	case boil.BeforeUpdateHook:
		demandBeforeUpdateHooks = append(demandBeforeUpdateHooks, demandHook)
	case boil.BeforeDeleteHook:
		demandBeforeDeleteHooks = append(demandBeforeDeleteHooks, demandHook)
	case boil.BeforeUpsertHook:
		demandBeforeUpsertHooks = append(demandBeforeUpsertHooks, demandHook)
	case boil.AfterInsertHook:
		demandAfterInsertHooks = append(demandAfterInsertHooks, demandHook)
	case boil.AfterSelectHook:
		demandAfterSelectHooks = append(demandAfterSelectHooks, demandHook)
	case boil.AfterUpdateHook:
		demandAfterUpdateHooks = append(demandAfterUpdateHooks, demandHook)
	case boil.AfterDeleteHook:
		demandAfterDeleteHooks = append(demandAfterDeleteHooks, demandHook)
	case boil.AfterUpsertHook:
		demandAfterUpsertHooks = append(demandAfterUpsertHooks, demandHook)
	}
}

// OneG returns a single demand record from the query using the global executor.
func (q demandQuery) OneG() (*Demand, error) {
	return q.One(boil.GetDB())
}

// One returns a single demand record from the query.
func (q demandQuery) One(exec boil.Executor) (*Demand, error) {
	o := &Demand{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for demand")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all Demand records from the query using the global executor.
func (q demandQuery) AllG() (DemandSlice, error) {
	return q.All(boil.GetDB())
}

// All returns all Demand records from the query.
func (q demandQuery) All(exec boil.Executor) (DemandSlice, error) {
	var o []*Demand

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Demand slice")
	}

	if len(demandAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all Demand records in the query, and panics on error.
func (q demandQuery) CountG() (int64, error) {
	return q.Count(boil.GetDB())
}

// Count returns the count of all Demand records in the query.
func (q demandQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count demand rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q demandQuery) ExistsG() (bool, error) {
	return q.Exists(boil.GetDB())
}

// Exists checks if the row exists in the table.
func (q demandQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if demand exists")
	}

	return count > 0, nil
}

// Demands retrieves all the records using an executor.
func Demands(mods ...qm.QueryMod) demandQuery {
	mods = append(mods, qm.From("\"demand\""))
	return demandQuery{NewQuery(mods...)}
}

// FindDemandG retrieves a single record by ID.
func FindDemandG(iD int64, selectCols ...string) (*Demand, error) {
	return FindDemand(boil.GetDB(), iD, selectCols...)
}

// FindDemand retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDemand(exec boil.Executor, iD int64, selectCols ...string) (*Demand, error) {
	demandObj := &Demand{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"demand\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, demandObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from demand")
	}

	return demandObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Demand) InsertG(columns boil.Columns) error {
	return o.Insert(boil.GetDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Demand) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no demand provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(demandColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	demandInsertCacheMut.RLock()
	cache, cached := demandInsertCache[key]
	demandInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			demandColumns,
			demandColumnsWithDefault,
			demandColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(demandType, demandMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(demandType, demandMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"demand\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"demand\" () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT \"%s\" FROM \"demand\" WHERE %s", strings.Join(returnColumns, "\",\""), strmangle.WhereClause("\"", "\"", 0, demandPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into demand")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == demandMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for demand")
	}

CacheNoHooks:
	if !cached {
		demandInsertCacheMut.Lock()
		demandInsertCache[key] = cache
		demandInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single Demand record using the global executor.
// See Update for more documentation.
func (o *Demand) UpdateG(columns boil.Columns) (int64, error) {
	return o.Update(boil.GetDB(), columns)
}

// Update uses an executor to update the Demand.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Demand) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	demandUpdateCacheMut.RLock()
	cache, cached := demandUpdateCache[key]
	demandUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			demandColumns,
			demandPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update demand, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"demand\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, demandPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(demandType, demandMapping, append(wl, demandPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update demand row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for demand")
	}

	if !cached {
		demandUpdateCacheMut.Lock()
		demandUpdateCache[key] = cache
		demandUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q demandQuery) UpdateAllG(cols M) (int64, error) {
	return q.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q demandQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for demand")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for demand")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o DemandSlice) UpdateAllG(cols M) (int64, error) {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DemandSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), demandPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"demand\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, demandPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in demand slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all demand")
	}
	return rowsAff, nil
}

// DeleteG deletes a single Demand record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Demand) DeleteG() (int64, error) {
	return o.Delete(boil.GetDB())
}

// Delete deletes a single Demand record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Demand) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Demand provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), demandPrimaryKeyMapping)
	sql := "DELETE FROM \"demand\" WHERE \"id\"=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from demand")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for demand")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q demandQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no demandQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from demand")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for demand")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o DemandSlice) DeleteAllG() (int64, error) {
	return o.DeleteAll(boil.GetDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DemandSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Demand slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(demandBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), demandPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"demand\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, demandPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from demand slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for demand")
	}

	if len(demandAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Demand) ReloadG() error {
	if o == nil {
		return errors.New("models: no Demand provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Demand) Reload(exec boil.Executor) error {
	ret, err := FindDemand(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DemandSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty DemandSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DemandSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DemandSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), demandPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"demand\".* FROM \"demand\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, demandPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DemandSlice")
	}

	*o = slice

	return nil
}

// DemandExistsG checks if the Demand row exists.
func DemandExistsG(iD int64) (bool, error) {
	return DemandExists(boil.GetDB(), iD)
}

// DemandExists checks if the Demand row exists.
func DemandExists(exec boil.Executor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"demand\" where \"id\"=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if demand exists")
	}

	return exists, nil
}
