// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testSummations(t *testing.T) {
	t.Parallel()

	query := Summations()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testSummationsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Summation{}
	if err = randomize.Struct(seed, o, summationDBTypes, true, summationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Summation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Summations().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSummationsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Summation{}
	if err = randomize.Struct(seed, o, summationDBTypes, true, summationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Summation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Summations().DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Summations().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSummationsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Summation{}
	if err = randomize.Struct(seed, o, summationDBTypes, true, summationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Summation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SummationSlice{o}

	if rowsAff, err := slice.DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Summations().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSummationsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Summation{}
	if err = randomize.Struct(seed, o, summationDBTypes, true, summationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Summation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := SummationExists(tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Summation exists: %s", err)
	}
	if !e {
		t.Errorf("Expected SummationExists to return true, but got false.")
	}
}

func testSummationsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Summation{}
	if err = randomize.Struct(seed, o, summationDBTypes, true, summationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Summation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	summationFound, err := FindSummation(tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if summationFound == nil {
		t.Error("want a record, got nil")
	}
}

func testSummationsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Summation{}
	if err = randomize.Struct(seed, o, summationDBTypes, true, summationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Summation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Summations().Bind(nil, tx, o); err != nil {
		t.Error(err)
	}
}

func testSummationsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Summation{}
	if err = randomize.Struct(seed, o, summationDBTypes, true, summationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Summation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Summations().One(tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testSummationsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	summationOne := &Summation{}
	summationTwo := &Summation{}
	if err = randomize.Struct(seed, summationOne, summationDBTypes, false, summationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Summation struct: %s", err)
	}
	if err = randomize.Struct(seed, summationTwo, summationDBTypes, false, summationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Summation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = summationOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = summationTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Summations().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testSummationsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	summationOne := &Summation{}
	summationTwo := &Summation{}
	if err = randomize.Struct(seed, summationOne, summationDBTypes, false, summationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Summation struct: %s", err)
	}
	if err = randomize.Struct(seed, summationTwo, summationDBTypes, false, summationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Summation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = summationOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = summationTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Summations().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func summationBeforeInsertHook(e boil.Executor, o *Summation) error {
	*o = Summation{}
	return nil
}

func summationAfterInsertHook(e boil.Executor, o *Summation) error {
	*o = Summation{}
	return nil
}

func summationAfterSelectHook(e boil.Executor, o *Summation) error {
	*o = Summation{}
	return nil
}

func summationBeforeUpdateHook(e boil.Executor, o *Summation) error {
	*o = Summation{}
	return nil
}

func summationAfterUpdateHook(e boil.Executor, o *Summation) error {
	*o = Summation{}
	return nil
}

func summationBeforeDeleteHook(e boil.Executor, o *Summation) error {
	*o = Summation{}
	return nil
}

func summationAfterDeleteHook(e boil.Executor, o *Summation) error {
	*o = Summation{}
	return nil
}

func summationBeforeUpsertHook(e boil.Executor, o *Summation) error {
	*o = Summation{}
	return nil
}

func summationAfterUpsertHook(e boil.Executor, o *Summation) error {
	*o = Summation{}
	return nil
}

func testSummationsHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &Summation{}
	o := &Summation{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, summationDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Summation object: %s", err)
	}

	AddSummationHook(boil.BeforeInsertHook, summationBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	summationBeforeInsertHooks = []SummationHook{}

	AddSummationHook(boil.AfterInsertHook, summationAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	summationAfterInsertHooks = []SummationHook{}

	AddSummationHook(boil.AfterSelectHook, summationAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	summationAfterSelectHooks = []SummationHook{}

	AddSummationHook(boil.BeforeUpdateHook, summationBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	summationBeforeUpdateHooks = []SummationHook{}

	AddSummationHook(boil.AfterUpdateHook, summationAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	summationAfterUpdateHooks = []SummationHook{}

	AddSummationHook(boil.BeforeDeleteHook, summationBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	summationBeforeDeleteHooks = []SummationHook{}

	AddSummationHook(boil.AfterDeleteHook, summationAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	summationAfterDeleteHooks = []SummationHook{}

	AddSummationHook(boil.BeforeUpsertHook, summationBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	summationBeforeUpsertHooks = []SummationHook{}

	AddSummationHook(boil.AfterUpsertHook, summationAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	summationAfterUpsertHooks = []SummationHook{}
}

func testSummationsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Summation{}
	if err = randomize.Struct(seed, o, summationDBTypes, true, summationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Summation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Summations().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSummationsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Summation{}
	if err = randomize.Struct(seed, o, summationDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Summation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Whitelist(summationColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Summations().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSummationsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Summation{}
	if err = randomize.Struct(seed, o, summationDBTypes, true, summationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Summation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testSummationsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Summation{}
	if err = randomize.Struct(seed, o, summationDBTypes, true, summationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Summation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SummationSlice{o}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}

func testSummationsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Summation{}
	if err = randomize.Struct(seed, o, summationDBTypes, true, summationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Summation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Summations().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	summationDBTypes = map[string]string{`Delivered`: `FLOAT`, `ID`: `INTEGER`, `Received`: `FLOAT`, `Timestamp`: `INTEGER`}
	_                = bytes.MinRead
)

func testSummationsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(summationPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(summationColumns) == len(summationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Summation{}
	if err = randomize.Struct(seed, o, summationDBTypes, true, summationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Summation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Summations().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, summationDBTypes, true, summationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Summation struct: %s", err)
	}

	if rowsAff, err := o.Update(tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testSummationsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(summationColumns) == len(summationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Summation{}
	if err = randomize.Struct(seed, o, summationDBTypes, true, summationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Summation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Summations().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, summationDBTypes, true, summationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Summation struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(summationColumns, summationPrimaryKeyColumns) {
		fields = summationColumns
	} else {
		fields = strmangle.SetComplement(
			summationColumns,
			summationPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := SummationSlice{o}
	if rowsAff, err := slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}
