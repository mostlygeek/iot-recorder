// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Summation is an object representing the database table.
type Summation struct {
	ID        int64   `boil:"id" json:"id" toml:"id" yaml:"id"`
	Timestamp int64   `boil:"timestamp" json:"timestamp" toml:"timestamp" yaml:"timestamp"`
	Delivered float32 `boil:"delivered" json:"delivered" toml:"delivered" yaml:"delivered"`
	Received  float32 `boil:"received" json:"received" toml:"received" yaml:"received"`

	R *summationR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L summationL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SummationColumns = struct {
	ID        string
	Timestamp string
	Delivered string
	Received  string
}{
	ID:        "id",
	Timestamp: "timestamp",
	Delivered: "delivered",
	Received:  "received",
}

// SummationRels is where relationship names are stored.
var SummationRels = struct {
}{}

// summationR is where relationships are stored.
type summationR struct {
}

// NewStruct creates a new relationship struct
func (*summationR) NewStruct() *summationR {
	return &summationR{}
}

// summationL is where Load methods for each relationship are stored.
type summationL struct{}

var (
	summationColumns               = []string{"id", "timestamp", "delivered", "received"}
	summationColumnsWithoutDefault = []string{"timestamp", "delivered", "received"}
	summationColumnsWithDefault    = []string{"id"}
	summationPrimaryKeyColumns     = []string{"id"}
)

type (
	// SummationSlice is an alias for a slice of pointers to Summation.
	// This should generally be used opposed to []Summation.
	SummationSlice []*Summation
	// SummationHook is the signature for custom Summation hook methods
	SummationHook func(boil.Executor, *Summation) error

	summationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	summationType                 = reflect.TypeOf(&Summation{})
	summationMapping              = queries.MakeStructMapping(summationType)
	summationPrimaryKeyMapping, _ = queries.BindMapping(summationType, summationMapping, summationPrimaryKeyColumns)
	summationInsertCacheMut       sync.RWMutex
	summationInsertCache          = make(map[string]insertCache)
	summationUpdateCacheMut       sync.RWMutex
	summationUpdateCache          = make(map[string]updateCache)
	summationUpsertCacheMut       sync.RWMutex
	summationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
)

var summationBeforeInsertHooks []SummationHook
var summationBeforeUpdateHooks []SummationHook
var summationBeforeDeleteHooks []SummationHook
var summationBeforeUpsertHooks []SummationHook

var summationAfterInsertHooks []SummationHook
var summationAfterSelectHooks []SummationHook
var summationAfterUpdateHooks []SummationHook
var summationAfterDeleteHooks []SummationHook
var summationAfterUpsertHooks []SummationHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Summation) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range summationBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Summation) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range summationBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Summation) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range summationBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Summation) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range summationBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Summation) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range summationAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Summation) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range summationAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Summation) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range summationAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Summation) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range summationAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Summation) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range summationAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSummationHook registers your hook function for all future operations.
func AddSummationHook(hookPoint boil.HookPoint, summationHook SummationHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		summationBeforeInsertHooks = append(summationBeforeInsertHooks, summationHook)
	case boil.BeforeUpdateHook:
		summationBeforeUpdateHooks = append(summationBeforeUpdateHooks, summationHook)
	case boil.BeforeDeleteHook:
		summationBeforeDeleteHooks = append(summationBeforeDeleteHooks, summationHook)
	case boil.BeforeUpsertHook:
		summationBeforeUpsertHooks = append(summationBeforeUpsertHooks, summationHook)
	case boil.AfterInsertHook:
		summationAfterInsertHooks = append(summationAfterInsertHooks, summationHook)
	case boil.AfterSelectHook:
		summationAfterSelectHooks = append(summationAfterSelectHooks, summationHook)
	case boil.AfterUpdateHook:
		summationAfterUpdateHooks = append(summationAfterUpdateHooks, summationHook)
	case boil.AfterDeleteHook:
		summationAfterDeleteHooks = append(summationAfterDeleteHooks, summationHook)
	case boil.AfterUpsertHook:
		summationAfterUpsertHooks = append(summationAfterUpsertHooks, summationHook)
	}
}

// OneG returns a single summation record from the query using the global executor.
func (q summationQuery) OneG() (*Summation, error) {
	return q.One(boil.GetDB())
}

// One returns a single summation record from the query.
func (q summationQuery) One(exec boil.Executor) (*Summation, error) {
	o := &Summation{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for summations")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all Summation records from the query using the global executor.
func (q summationQuery) AllG() (SummationSlice, error) {
	return q.All(boil.GetDB())
}

// All returns all Summation records from the query.
func (q summationQuery) All(exec boil.Executor) (SummationSlice, error) {
	var o []*Summation

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Summation slice")
	}

	if len(summationAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all Summation records in the query, and panics on error.
func (q summationQuery) CountG() (int64, error) {
	return q.Count(boil.GetDB())
}

// Count returns the count of all Summation records in the query.
func (q summationQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count summations rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q summationQuery) ExistsG() (bool, error) {
	return q.Exists(boil.GetDB())
}

// Exists checks if the row exists in the table.
func (q summationQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if summations exists")
	}

	return count > 0, nil
}

// Summations retrieves all the records using an executor.
func Summations(mods ...qm.QueryMod) summationQuery {
	mods = append(mods, qm.From("\"summations\""))
	return summationQuery{NewQuery(mods...)}
}

// FindSummationG retrieves a single record by ID.
func FindSummationG(iD int64, selectCols ...string) (*Summation, error) {
	return FindSummation(boil.GetDB(), iD, selectCols...)
}

// FindSummation retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSummation(exec boil.Executor, iD int64, selectCols ...string) (*Summation, error) {
	summationObj := &Summation{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"summations\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, summationObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from summations")
	}

	return summationObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Summation) InsertG(columns boil.Columns) error {
	return o.Insert(boil.GetDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Summation) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no summations provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(summationColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	summationInsertCacheMut.RLock()
	cache, cached := summationInsertCache[key]
	summationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			summationColumns,
			summationColumnsWithDefault,
			summationColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(summationType, summationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(summationType, summationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"summations\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"summations\" () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT \"%s\" FROM \"summations\" WHERE %s", strings.Join(returnColumns, "\",\""), strmangle.WhereClause("\"", "\"", 0, summationPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into summations")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == summationMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for summations")
	}

CacheNoHooks:
	if !cached {
		summationInsertCacheMut.Lock()
		summationInsertCache[key] = cache
		summationInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single Summation record using the global executor.
// See Update for more documentation.
func (o *Summation) UpdateG(columns boil.Columns) (int64, error) {
	return o.Update(boil.GetDB(), columns)
}

// Update uses an executor to update the Summation.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Summation) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	summationUpdateCacheMut.RLock()
	cache, cached := summationUpdateCache[key]
	summationUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			summationColumns,
			summationPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update summations, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"summations\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, summationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(summationType, summationMapping, append(wl, summationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update summations row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for summations")
	}

	if !cached {
		summationUpdateCacheMut.Lock()
		summationUpdateCache[key] = cache
		summationUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q summationQuery) UpdateAllG(cols M) (int64, error) {
	return q.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q summationQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for summations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for summations")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o SummationSlice) UpdateAllG(cols M) (int64, error) {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SummationSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), summationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"summations\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, summationPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in summation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all summation")
	}
	return rowsAff, nil
}

// DeleteG deletes a single Summation record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Summation) DeleteG() (int64, error) {
	return o.Delete(boil.GetDB())
}

// Delete deletes a single Summation record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Summation) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Summation provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), summationPrimaryKeyMapping)
	sql := "DELETE FROM \"summations\" WHERE \"id\"=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from summations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for summations")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q summationQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no summationQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from summations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for summations")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o SummationSlice) DeleteAllG() (int64, error) {
	return o.DeleteAll(boil.GetDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SummationSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Summation slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(summationBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), summationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"summations\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, summationPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from summation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for summations")
	}

	if len(summationAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Summation) ReloadG() error {
	if o == nil {
		return errors.New("models: no Summation provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Summation) Reload(exec boil.Executor) error {
	ret, err := FindSummation(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SummationSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty SummationSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SummationSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SummationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), summationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"summations\".* FROM \"summations\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, summationPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SummationSlice")
	}

	*o = slice

	return nil
}

// SummationExistsG checks if the Summation row exists.
func SummationExistsG(iD int64) (bool, error) {
	return SummationExists(boil.GetDB(), iD)
}

// SummationExists checks if the Summation row exists.
func SummationExists(exec boil.Executor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"summations\" where \"id\"=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if summations exists")
	}

	return exists, nil
}
